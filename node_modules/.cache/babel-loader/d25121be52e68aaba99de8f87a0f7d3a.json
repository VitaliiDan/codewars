{"ast":null,"code":"var _jsxFileName = \"/Users/davi/Documents/projects/codewars/src/components/ConsecutiveStrings.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ConsecutiveStrings = () => {\n  _s();\n\n  const [currentValue, setCurrentValue] = useState('');\n  const [drawAnswer, setDrawAnswer] = useState('');\n\n  const onChangeStringHandle = eve => setCurrentValue(eve.target.value);\n\n  const checkStringHandle = () => {\n    const tempArray = currentValue.slice(1, -1).split(`\", \"`);\n    setDrawAnswer('+++');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"DETECT PANGRAM\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"strarr = [\\\"tree\\\", \\\"foling\\\", \\\"trashy\\\", \\\"blue\\\", \\\"abcdef\\\", \\\"uvwxyz\\\"], k = 2 Concatenate the consecutive strings of strarr by 2, we get: treefoling   (length 10)  concatenation of strarr[0] and strarr[1] folingtrashy (\\\"      12)  concatenation of strarr[1] and strarr[2] trashyblue   (\\\"      10)  concatenation of strarr[2] and strarr[3] blueabcdef   (\\\"      10)  concatenation of strarr[3] and strarr[4] abcdefuvwxyz (\\\"      12)  concatenation of strarr[4] and strarr[5] Two strings are the longest: \\\"folingtrashy\\\" and \\\"abcdefuvwxyz\\\". The first that came is \\\"folingtrashy\\\" so longest_consec(strarr, 2) should return \\\"folingtrashy\\\". In the same way: longest_consec([\\\"zone\\\", \\\"abigail\\\", \\\"theta\\\", \\\"form\\\", \\\"libe\\\", \\\"zas\\\", \\\"theta\\\", \\\"abigail\\\"], 2) \\\"abigailtheta\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        value: currentValue,\n        onChange: onChangeStringHandle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkStringHandle,\n      children: \"check a string\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Answer: \", drawAnswer, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ConsecutiveStrings, \"JVP+OpHz7cAkFVQZT+eB1vqz9Gg=\");\n\n_c = ConsecutiveStrings;\nexport default ConsecutiveStrings;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConsecutiveStrings\");","map":{"version":3,"sources":["/Users/davi/Documents/projects/codewars/src/components/ConsecutiveStrings.js"],"names":["React","useState","ConsecutiveStrings","currentValue","setCurrentValue","drawAnswer","setDrawAnswer","onChangeStringHandle","eve","target","value","checkStringHandle","tempArray","slice","split"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAC7B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCH,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,EAAD,CAA5C;;AACA,QAAMM,oBAAoB,GAAIC,GAAD,IAASJ,eAAe,CAACI,GAAG,CAACC,MAAJ,CAAWC,KAAZ,CAArD;;AAEA,QAAMC,iBAAiB,GAAG,MAAM;AAC5B,UAAMC,SAAS,GAAGT,YAAY,CAACU,KAAb,CAAmB,CAAnB,EAAsB,CAAC,CAAvB,EAA0BC,KAA1B,CAAiC,MAAjC,CAAlB;AACAR,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAHD;;AAKA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAoBI;AAAA,6BACI;AACI,QAAA,KAAK,EAAEH,YADX;AAEI,QAAA,QAAQ,EAAEI;AAFd;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YApBJ,eA0BI;AACI,MAAA,OAAO,EAAEI,iBADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA1BJ,eA+BI;AAAA,6BAAaN,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA,YA/BJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmCH,CA7CD;;GAAMH,kB;;KAAAA,kB;AA+CN,eAAeA,kBAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst ConsecutiveStrings = () => {\n    const [currentValue, setCurrentValue] = useState('');\n    const [drawAnswer, setDrawAnswer] = useState('');\n    const onChangeStringHandle = (eve) => setCurrentValue(eve.target.value);\n\n    const checkStringHandle = () => {\n        const tempArray = currentValue.slice(1, -1).split(`\", \"`);\n        setDrawAnswer('+++');\n    }\n\n    return (\n        <div>\n            <h1>DETECT PANGRAM</h1>\n            <p>\n                strarr = [\"tree\", \"foling\", \"trashy\", \"blue\", \"abcdef\", \"uvwxyz\"], k = 2\n\n                Concatenate the consecutive strings of strarr by 2, we get:\n\n                treefoling   (length 10)  concatenation of strarr[0] and strarr[1]\n                folingtrashy (\"      12)  concatenation of strarr[1] and strarr[2]\n                trashyblue   (\"      10)  concatenation of strarr[2] and strarr[3]\n                blueabcdef   (\"      10)  concatenation of strarr[3] and strarr[4]\n                abcdefuvwxyz (\"      12)  concatenation of strarr[4] and strarr[5]\n\n                Two strings are the longest: \"folingtrashy\" and \"abcdefuvwxyz\".\n                The first that came is \"folingtrashy\" so\n                longest_consec(strarr, 2) should return \"folingtrashy\".\n\n                In the same way:\n                longest_consec([\"zone\", \"abigail\", \"theta\", \"form\", \"libe\", \"zas\", \"theta\", \"abigail\"], 2) \"abigailtheta\"\n            </p>\n            <label>\n                <input\n                    value={currentValue}\n                    onChange={onChangeStringHandle}\n                />\n            </label>\n            <button\n                onClick={checkStringHandle}\n            >\n                check a string\n            </button>\n            <h2>Answer: {drawAnswer} </h2>\n        </div >\n    )\n}\n\nexport default ConsecutiveStrings;"]},"metadata":{},"sourceType":"module"}