{"ast":null,"code":"var _jsxFileName = \"C:\\\\VDan\\\\projects\\\\playground\\\\codewars\\\\src\\\\components\\\\ConsecutiveStrings.js\";\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ConsecutiveStrings = () => {\n  const handle = (array, n) => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Consecutive strings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"strarr = [\\\"tree\\\", \\\"foling\\\", \\\"trashy\\\", \\\"blue\\\", \\\"abcdef\\\", \\\"uvwxyz\\\"], k = 2 Concatenate the consecutive strings of strarr by 2, we get: treefoling   (length 10)  concatenation of strarr[0] and strarr[1] folingtrashy (\\\"      12)  concatenation of strarr[1] and strarr[2] trashyblue   (\\\"      10)  concatenation of strarr[2] and strarr[3] blueabcdef   (\\\"      10)  concatenation of strarr[3] and strarr[4] abcdefuvwxyz (\\\"      12)  concatenation of strarr[4] and strarr[5] Two strings are the longest: \\\"folingtrashy\\\" and \\\"abcdefuvwxyz\\\". The first that came is \\\"folingtrashy\\\" so longest_consec(strarr, 2) should return \\\"folingtrashy\\\". In the same way: longest_consec([\\\"zone\\\", \\\"abigail\\\", \\\"theta\\\", \\\"form\\\", \\\"libe\\\", \\\"zas\\\", \\\"theta\\\", \\\"abigail\\\"], 2) \\\"abigailtheta\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Q:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"[\\\"zone\\\", \\\"abigail\\\", \\\"theta\\\", \\\"form\\\", \\\"libe\\\", \\\"zas\\\"], 2), \\\"abigailtheta\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"[\\\"ejjjjmmtthh\\\", \\\"zxxuueeg\\\", \\\"aanlljrrrxx\\\", \\\"dqqqaaabbb\\\", \\\"oocccffuucccjjjkkkjyyyeehh\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"[], 3), \\\"\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"[\\\"itvayloxrp\\\",\\\"wkppqsztdkmvcuwvereiupccauycnjutlv\\\",\\\"vweqilsfytihvrzlaodfixoyxvyuyvgpck\\\"], 2), \\\"wkppqsztdkmvcuwvereiupccauycnjutlvvweqilsfytihvrzlaodfixoyxvyuyvgpck\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"[\\\"wlwsasphmxx\\\",\\\"owiaxujylentrklctozmymu\\\",\\\"wpgozvxxiu\\\"], 2), \\\"wlwsasphmxxowiaxujylentrklctozmymu\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"[\\\"zone\\\", \\\"abigail\\\", \\\"theta\\\", \\\"form\\\", \\\"libe\\\", \\\"zas\\\"], -2), \\\"\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"[\\\"it\\\",\\\"wkppv\\\",\\\"ixoyx\\\", \\\"3452\\\", \\\"zzzzzzzzzzzz\\\"], 3), \\\"ixoyx3452zzzzzzzzzzzz\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"[\\\"it\\\",\\\"wkppv\\\",\\\"ixoyx\\\", \\\"3452\\\", \\\"zzzzzzzzzzzz\\\"], 15), \\\"\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"[\\\"it\\\",\\\"wkppv\\\",\\\"ixoyx\\\", \\\"3452\\\", \\\"zzzzzzzzzzzz\\\"], 0), \\\"\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Answers:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ConsecutiveStrings;\nexport default ConsecutiveStrings;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConsecutiveStrings\");","map":{"version":3,"sources":["C:/VDan/projects/playground/codewars/src/components/ConsecutiveStrings.js"],"names":["React","useState","ConsecutiveStrings","handle","array","n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAE7B,QAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,CAAR,KAAc,CAC5B,CADD;;AAGA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAmBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBJ,eAoBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YApBJ,eAqBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YArBJ,eAsBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAtBJ,eAuBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAvBJ,eAwBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBJ,eAyBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBJ,eA0BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA1BJ,eA2BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA3BJ,eA4BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA5BJ,eA6BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA7BJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoCH,CAzCD;;KAAMH,kB;AA2CN,eAAeA,kBAAf","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst ConsecutiveStrings = () => {\r\n\r\n    const handle = (array, n) => {\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Consecutive strings</h1>\r\n            <p>\r\n                strarr = [\"tree\", \"foling\", \"trashy\", \"blue\", \"abcdef\", \"uvwxyz\"], k = 2\r\n\r\n                Concatenate the consecutive strings of strarr by 2, we get:\r\n                treefoling   (length 10)  concatenation of strarr[0] and strarr[1]\r\n                folingtrashy (\"      12)  concatenation of strarr[1] and strarr[2]\r\n                trashyblue   (\"      10)  concatenation of strarr[2] and strarr[3]\r\n                blueabcdef   (\"      10)  concatenation of strarr[3] and strarr[4]\r\n                abcdefuvwxyz (\"      12)  concatenation of strarr[4] and strarr[5]\r\n\r\n                Two strings are the longest: \"folingtrashy\" and \"abcdefuvwxyz\".\r\n                The first that came is \"folingtrashy\" so\r\n                longest_consec(strarr, 2) should return \"folingtrashy\".\r\n\r\n                In the same way:\r\n                longest_consec([\"zone\", \"abigail\", \"theta\", \"form\", \"libe\", \"zas\", \"theta\", \"abigail\"], 2) \"abigailtheta\"\r\n            </p>\r\n            <h2>Q:</h2>\r\n            <p>[\"zone\", \"abigail\", \"theta\", \"form\", \"libe\", \"zas\"], 2), \"abigailtheta\"</p>\r\n            <p>[\"ejjjjmmtthh\", \"zxxuueeg\", \"aanlljrrrxx\", \"dqqqaaabbb\", \"oocccffuucccjjjkkkjyyyeehh\"</p>\r\n            <p>[], 3), \"\"</p>\r\n            <p>[\"itvayloxrp\",\"wkppqsztdkmvcuwvereiupccauycnjutlv\",\"vweqilsfytihvrzlaodfixoyxvyuyvgpck\"], 2), \"wkppqsztdkmvcuwvereiupccauycnjutlvvweqilsfytihvrzlaodfixoyxvyuyvgpck\"</p>\r\n            <p>[\"wlwsasphmxx\",\"owiaxujylentrklctozmymu\",\"wpgozvxxiu\"], 2), \"wlwsasphmxxowiaxujylentrklctozmymu\"</p>\r\n            <p>[\"zone\", \"abigail\", \"theta\", \"form\", \"libe\", \"zas\"], -2), \"\"</p>\r\n            <p>[\"it\",\"wkppv\",\"ixoyx\", \"3452\", \"zzzzzzzzzzzz\"], 3), \"ixoyx3452zzzzzzzzzzzz\"</p>\r\n            <p>[\"it\",\"wkppv\",\"ixoyx\", \"3452\", \"zzzzzzzzzzzz\"], 15), \"\"</p>\r\n            <p>[\"it\",\"wkppv\",\"ixoyx\", \"3452\", \"zzzzzzzzzzzz\"], 0), \"\"</p>\r\n            <h2>Answers:</h2>\r\n            {\r\n\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default ConsecutiveStrings;"]},"metadata":{},"sourceType":"module"}