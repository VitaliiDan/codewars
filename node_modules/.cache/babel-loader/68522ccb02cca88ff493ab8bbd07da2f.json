{"ast":null,"code":"var _jsxFileName = \"C:\\\\VDan\\\\projects\\\\playground\\\\codewars\\\\src\\\\components\\\\ConsecutiveStrings.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ConsecutiveStrings = () => {\n  // const handle = (array, n) => {\n  // }\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ConsecutiveStrings;\nexport default ConsecutiveStrings;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConsecutiveStrings\");","map":{"version":3,"sources":["C:/VDan/projects/playground/codewars/src/components/ConsecutiveStrings.js"],"names":["React","ConsecutiveStrings"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAE7B;AACA;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAoCH,CAzCD;;KAAMA,kB;AA2CN,eAAeA,kBAAf","sourcesContent":["import React from 'react';\r\n\r\nconst ConsecutiveStrings = () => {\r\n\r\n    // const handle = (array, n) => {\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            {/*<h1>Consecutive strings</h1>*/}\r\n            {/*<p>*/}\r\n            {/*    strarr = [\"tree\", \"foling\", \"trashy\", \"blue\", \"abcdef\", \"uvwxyz\"], k = 2*/}\r\n\r\n            {/*    Concatenate the consecutive strings of strarr by 2, we get:*/}\r\n            {/*    treefoling   (length 10)  concatenation of strarr[0] and strarr[1]*/}\r\n            {/*    folingtrashy (\"      12)  concatenation of strarr[1] and strarr[2]*/}\r\n            {/*    trashyblue   (\"      10)  concatenation of strarr[2] and strarr[3]*/}\r\n            {/*    blueabcdef   (\"      10)  concatenation of strarr[3] and strarr[4]*/}\r\n            {/*    abcdefuvwxyz (\"      12)  concatenation of strarr[4] and strarr[5]*/}\r\n\r\n            {/*    Two strings are the longest: \"folingtrashy\" and \"abcdefuvwxyz\".*/}\r\n            {/*    The first that came is \"folingtrashy\" so*/}\r\n            {/*    longest_consec(strarr, 2) should return \"folingtrashy\".*/}\r\n\r\n            {/*    In the same way:*/}\r\n            {/*    longest_consec([\"zone\", \"abigail\", \"theta\", \"form\", \"libe\", \"zas\", \"theta\", \"abigail\"], 2) \"abigailtheta\"*/}\r\n            {/*</p>*/}\r\n            {/*<h2>Q:</h2>*/}\r\n            {/*<p>[\"zone\", \"abigail\", \"theta\", \"form\", \"libe\", \"zas\"], 2), \"abigailtheta\"</p>*/}\r\n            {/*<p>[\"ejjjjmmtthh\", \"zxxuueeg\", \"aanlljrrrxx\", \"dqqqaaabbb\", \"oocccffuucccjjjkkkjyyyeehh\"</p>*/}\r\n            {/*<p>[], 3), \"\"</p>*/}\r\n            {/*<p>[\"itvayloxrp\",\"wkppqsztdkmvcuwvereiupccauycnjutlv\",\"vweqilsfytihvrzlaodfixoyxvyuyvgpck\"], 2), \"wkppqsztdkmvcuwvereiupccauycnjutlvvweqilsfytihvrzlaodfixoyxvyuyvgpck\"</p>*/}\r\n            {/*<p>[\"wlwsasphmxx\",\"owiaxujylentrklctozmymu\",\"wpgozvxxiu\"], 2), \"wlwsasphmxxowiaxujylentrklctozmymu\"</p>*/}\r\n            {/*<p>[\"zone\", \"abigail\", \"theta\", \"form\", \"libe\", \"zas\"], -2), \"\"</p>*/}\r\n            {/*<p>[\"it\",\"wkppv\",\"ixoyx\", \"3452\", \"zzzzzzzzzzzz\"], 3), \"ixoyx3452zzzzzzzzzzzz\"</p>*/}\r\n            {/*<p>[\"it\",\"wkppv\",\"ixoyx\", \"3452\", \"zzzzzzzzzzzz\"], 15), \"\"</p>*/}\r\n            {/*<p>[\"it\",\"wkppv\",\"ixoyx\", \"3452\", \"zzzzzzzzzzzz\"], 0), \"\"</p>*/}\r\n            {/*<h2>Answers:</h2>*/}\r\n            {/*{*/}\r\n\r\n            {/*}*/}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default ConsecutiveStrings;\r\n"]},"metadata":{},"sourceType":"module"}